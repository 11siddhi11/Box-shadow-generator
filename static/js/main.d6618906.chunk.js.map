{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","horizontal","sethorizaontal","vertical","setvertical","blur","setblur","color","setcolor","checkOn","setcheck","className","type","min","max","value","onChange","e","target","class","checked","style","boxShadow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAuDeA,MArDf,WAAgB,IAAD,EACwBC,mBAAS,IADjC,mBACNC,EADM,KACMC,EADN,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIaN,mBAAS,QAJtB,mBAINO,EAJM,KAICC,EAJD,OAKeR,oBAAS,GALxB,mBAKNS,EALM,KAKGC,EALH,KAOb,OACE,qCACA,sDACA,sBAAKC,UAAU,MAAf,UAEE,sBAAKA,UAAU,WAAf,UAEE,sDACA,uBAAOC,KAAK,QAAQC,IAAI,OAAOC,IAAI,MAAMC,MAAOd,EAAYe,SAAU,SAACC,GAAQf,EAAee,EAAEC,OAAOH,UAEvG,oDACA,uBAAOH,KAAK,QAAQC,IAAI,OAAOC,IAAI,MAAMC,MAAOZ,EAAUa,SAAU,SAACC,GAAQb,EAAYa,EAAEC,OAAOH,UAElG,yCACA,uBAAOH,KAAK,QAAQC,IAAI,OAAOC,IAAI,MAAMC,MAAOV,EAAMW,SAAU,SAACC,GAAQX,EAAQW,EAAEC,OAAOH,UAE1F,sBAAKJ,UAAU,SAAf,UAEE,0CACA,uBAAOC,KAAK,QAAQC,IAAI,OAAOC,IAAI,MAAMC,MAAOR,EAAOS,SAAU,SAACC,GAAQT,EAASS,EAAEC,OAAOH,aAE9F,qBAAKJ,UAAU,SAAf,SACE,qBAAKQ,MAAM,SAAX,SACE,4CAEN,uBAAOP,KAAK,WAAWQ,QAASX,EAASO,SAAU,WAAQN,GAAUD,MAC7D,sBAAMU,MAAM,UAHd,kBAWN,qBAAKR,UAAU,SAAf,SACE,qBAAKA,UAAU,MAAMU,MAAO,CAAEC,UAAU,GAAD,OAAKrB,EAAL,cAAqBE,EAArB,cAAmCE,EAAnC,cAA6CE,EAA7C,aAAuDE,EAAU,QAAU,KAAlH,SACE,4CAAeR,EAAf,MAA8BE,EAA9B,MAA2CE,EAA3C,MAAoDE,EAApD,IAA4DE,EAAU,QAAU,iBCjC3Ec,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d6618906.chunk.js","sourcesContent":["import \"./App.css\"\nimport { useState } from \"react\"\nfunction App() {\n  const [horizontal, sethorizaontal] = useState(10)\n  const [vertical, setvertical] = useState(10)\n  const [blur, setblur] = useState(10)\n  const [color, setcolor] = useState(\"#000\")\n  const [checkOn, setcheck] = useState(false)\n\n  return (\n    <>\n    <h3>box shadow generator</h3>\n    <div className=\"App\">\n      \n      <div className=\"controls\">\n\n        <label>Horizontal length</label>\n        <input type=\"range\" min=\"-200\" max=\"200\" value={horizontal} onChange={(e) => { sethorizaontal(e.target.value) }} />\n\n        <label>Vertical length</label>\n        <input type=\"range\" min=\"-200\" max=\"200\" value={vertical} onChange={(e) => { setvertical(e.target.value) }} />\n\n        <label>Blur</label>\n        <input type=\"range\" min=\"-200\" max=\"200\" value={blur} onChange={(e) => { setblur(e.target.value) }} />\n\n        <div className=\"adjust\">\n\n          <label>Color</label>\n          <input type=\"color\" min=\"-200\" max=\"200\" value={color} onChange={(e) => { setcolor(e.target.value) }} />\n        </div>\n        <div className=\"adjust\">\n          <div class=\"switch\">\n            <label>\n              Outline\n      <input type=\"checkbox\" checked={checkOn} onChange={() => { setcheck(!checkOn) }} />\n              <span class=\"lever\"></span>\n              Inset\n    </label>\n          </div>\n\n        </div>\n\n      </div>\n      <div className=\"output\">\n        <div className=\"box\" style={{ boxShadow: `${horizontal}px ${vertical}px ${blur}px ${color}  ${checkOn ? \"inset\" : \"\"}` }}>\n          <p>box-shadow:{horizontal}px {vertical}px {blur}px {color} {checkOn ? \"inset\" : \"\"}</p>\n\n        </div>\n\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}